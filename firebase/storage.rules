rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the file
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to validate audio file
    function isValidAudioFile() {
      return request.resource.size < 100 * 1024 * 1024 && // Max 100MB
        request.resource.contentType.matches('audio/.*|video/mp4');
    }
    
    // Audio files storage
    match /audio/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidAudioFile();
      allow delete: if isOwner(userId);
    }
    
    // Transcription outputs
    match /transcriptions/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if false; // Only backend can write
      allow delete: if isOwner(userId);
    }
    
    // User profile images
    match /profiles/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
        request.resource.size < 5 * 1024 * 1024 && // Max 5MB
        request.resource.contentType.matches('image/.*');
      allow delete: if isOwner(userId);
    }
  }
}