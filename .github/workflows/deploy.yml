name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build shared package
        run: npm run build:shared
      
      - name: Run backend tests
        run: |
          cd apps/api
          npm run test
      
      - name: Run linting
        run: npm run lint

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure environment
        run: |
          echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.next \
            --exclude=dist \
            --exclude=temp \
            --exclude=logs \
            --exclude=.env \
            --exclude=.env.local \
            .
      
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/tmp"
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            # Configuration
            PROJECT_PATH="/opt/transcribe"
            DEPLOY_ENV="${{ env.DEPLOY_ENV }}"
            COMMIT_SHA="${{ env.COMMIT_SHA }}"
            
            echo "Deploying commit $COMMIT_SHA to $DEPLOY_ENV environment"
            
            # Create project directory
            mkdir -p $PROJECT_PATH
            cd $PROJECT_PATH
            
            # Backup current deployment
            if [ -d "current" ]; then
              echo "Backing up current deployment..."
              rm -rf previous
              mv current previous
            fi
            
            # Extract new deployment
            echo "Extracting new deployment..."
            mkdir current
            tar -xzf /tmp/deployment.tar.gz -C current
            rm /tmp/deployment.tar.gz
            
            cd current
            
            # Copy production environment file
            if [ ! -f ".env.production" ]; then
              if [ -f "../.env.production" ]; then
                cp ../.env.production .
              else
                echo "Error: .env.production not found!"
                exit 1
              fi
            fi
            
            # Update domain in Nginx config
            if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
              sed -i "s/yourdomain.com/${{ secrets.DOMAIN_NAME }}/g" nginx/sites-enabled/transcribe.conf
            fi
            
            # Build and deploy with Docker Compose
            echo "Building Docker images..."
            docker-compose -f docker-compose.prod.yml build
            
            echo "Stopping old containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            echo "Starting new containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            sleep 15
            
            # Check service status
            docker-compose -f docker-compose.prod.yml ps
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully!"
      
      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Check if services are running
            curl -f -s -o /dev/null -w "Frontend HTTP Status: %{http_code}\n" https://${{ secrets.DOMAIN_NAME }} || exit 1
            curl -f -s -o /dev/null -w "API HTTP Status: %{http_code}\n" https://${{ secrets.DOMAIN_NAME }}/api/health || exit 1
            echo "Health checks passed!"
      
      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const env = '${{ env.DEPLOY_ENV }}';
            const sha = '${{ env.COMMIT_SHA }}';
            const emoji = status === 'success' ? '✅' : '❌';
            
            const message = `${emoji} Deployment to ${env} ${status}!\nCommit: ${sha}`;
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 1,
              state: status === 'success' ? 'success' : 'failure',
              description: message,
              environment: env
            });

  rollback:
    name: Rollback if Failed
    needs: build-and-deploy
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            PROJECT_PATH="/opt/transcribe"
            cd $PROJECT_PATH
            
            if [ -d "previous" ]; then
              echo "Rolling back to previous deployment..."
              rm -rf current
              mv previous current
              
              cd current
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
              
              echo "Rollback completed!"
            else
              echo "No previous deployment found for rollback"
              exit 1
            fi