version: '3.8'

services:
  # Traefik - Modern reverse proxy with automatic SSL
  traefik:
    image: traefik:v3.0
    container_name: transcribe-traefik
    command:
      # Enable Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=transcribe_transcribe-network"
      
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      
      # SSL/TLS Configuration - Use HTTP challenge for Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@neuralsummary.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"

      # Logging
      - "--log.level=DEBUG"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - traefik-logs:/var/log/traefik
    networks:
      - transcribe-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis - Message queue and caching
  redis:
    image: redis:7-alpine
    container_name: transcribe-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - transcribe-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Backend - NestJS
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: transcribe-api
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FRONTEND_URL=https://neuralsummary.com
    env_file:
      - .env.production
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api/temp:/app/apps/api/temp
      - api-logs:/app/apps/api/logs
    networks:
      - transcribe-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      
      # WebSocket routing (highest priority for socket.io)
      - "traefik.http.routers.websocket.rule=(Host(`neuralsummary.com`) || Host(`www.neuralsummary.com`)) && PathPrefix(`/api/socket.io`)"
      - "traefik.http.routers.websocket.entrypoints=websecure"
      - "traefik.http.routers.websocket.tls=true"
      - "traefik.http.routers.websocket.tls.certresolver=letsencrypt"
      - "traefik.http.routers.websocket.priority=100"
      - "traefik.http.routers.websocket.service=api-websocket"
      - "traefik.http.routers.websocket.middlewares=websocket-strip-prefix@docker"
      
      # Strip /api prefix for WebSocket
      - "traefik.http.middlewares.websocket-strip-prefix.stripprefix.prefixes=/api"
      
      # Service configuration for WebSocket
      - "traefik.http.services.api-websocket.loadbalancer.server.port=3001"
      
      # Increase max request body size for file uploads (5GB)
      - "traefik.http.middlewares.api-buffering.buffering.maxRequestBodyBytes=5368709120"
      
      # API routing for regular HTTP requests  
      - "traefik.http.routers.api.rule=(Host(`neuralsummary.com`) || Host(`www.neuralsummary.com`)) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.priority=90"
      - "traefik.http.routers.api.service=api-service"
      - "traefik.http.routers.api.middlewares=api-strip-prefix@docker,api-buffering@docker"
      
      # Strip /api prefix for regular API calls
      - "traefik.http.middlewares.api-strip-prefix.stripprefix.prefixes=/api"
      
      # Service configuration for API
      - "traefik.http.services.api-service.loadbalancer.server.port=3001"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web Frontend - Next.js
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: transcribe-web
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INTERNAL_API_URL=http://api:3001
    env_file:
      - .env.production
    depends_on:
      - api
    networks:
      - transcribe-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      
      # Frontend routing (lower priority, catches everything else)
      - "traefik.http.routers.web.rule=Host(`neuralsummary.com`) || Host(`www.neuralsummary.com`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.web.priority=50"
      - "traefik.http.routers.web.service=web-service"
      - "traefik.http.services.web-service.loadbalancer.server.port=3000"
      
      # HTTP to HTTPS redirect
      - "traefik.http.routers.web-redirect.rule=Host(`neuralsummary.com`) || Host(`www.neuralsummary.com`)"
      - "traefik.http.routers.web-redirect.entrypoints=web"
      - "traefik.http.routers.web-redirect.middlewares=https-redirect@docker"
      
      # Security headers middleware
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      
      - "traefik.http.routers.web.middlewares=security-headers@docker"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis-data:
    driver: local
  api-logs:
    driver: local
  traefik-certificates:
    driver: local
  traefik-logs:
    driver: local

networks:
  transcribe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16